# See http://www.appveyor.com/docs/appveyor-yml

version: '{build}'

# Branches to build
branches:
  only: 
    - master

configuration: 
  - Release 
  - Debug

environment:
  MSBUILD_FLAGS: /verbosity:minimal /maxcpucount /nologo 
  matrix: 
    # https://www.appveyor.com/docs/build-environment/#qt
    # MSVC x86
    #- bitsize:    x86
    #  platform:   amd64_x86
    #  qt:         5.10.1\msvc2015
    #  suffix:     msvc2015
    #  generator:  "Visual Studio 14 2015"

    # MSVC x64
    - bitsize:    x64
      platform:   amd64
      qt:         5.10.1\msvc2015_64
      suffix:     msvc2015
      generator:  "Visual Studio 14 2015 Win64"

matrix:
  fast_finish: true

clone_depth: 5

# scripts that are called at very beginning, before repo cloning
init:
  - date /T & time /T
  - git config --global core.autocrlf input
  # go to hell Xamarin (see http://help.appveyor.com/discussions/problems/4569)
  - del "C:\Program Files (x86)\MSBuild\14.0\Microsoft.Common.targets\ImportAfter\Xamarin.Common.targets"
  # Set "build version number" to "short-commit-hash" or when tagged to "tag name" (Travis style)
  - ps: >-
      if ($env:APPVEYOR_REPO_TAG -eq "true")
      {
        Update-AppveyorBuild -Version "$env:APPVEYOR_REPO_TAG_NAME"
      }
      else
      {
        Update-AppveyorBuild -Version "dev-$($env:APPVEYOR_REPO_COMMIT.substring(0,7))"
      }

install:
  - cd %REPO_DIR%
  - git submodule update --init --recursive

before_build:  
  # set QT path and env vars
  - set PATH=C:\Qt\%qt%\bin;C:\Qt\%qt%;%PATH%
  - set QTDIR=C:\Qt\%qt%
  - call "C:\Qt\%qt%\bin\qtenv2.bat"
  # set Microsoft Visual Studio env vars
  - call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" %platform%
  - set SPEC="win32-msvc"
  # Show build folder
  - echo %APPVEYOR_BUILD_FOLDER%
  - echo %CONFIGURATION%
  # show qmake and make version
  - qmake -v
  # zlib
  - cd %APPVEYOR_BUILD_FOLDER%\third-party\zlib
  - mkdir build
  - cd build
  - cmake -G "%generator%" ../ -DCMAKE_INSTALL_PREFIX=../../../libs/zlib
  - call msbuild %MSBUILD_FLAGS% /t:Build /p:Configuration=%CONFIGURATION% /p:Platform="%bitsize%" zlib.sln 
  - msbuild %MSBUILD_FLAGS% INSTALL.vcxproj
  # apply CMakeList patch for quazip
  - cd %APPVEYOR_BUILD_FOLDER%
  - copy third-party\patches\quazip\CMakeLists.txt third-party\quazip /Y
  - del %APPVEYOR_BUILD_FOLDER%\third-party\quazip\quazip.sln
  # quazip  
  - cd %APPVEYOR_BUILD_FOLDER%\third-party\quazip
  - mkdir build
  - cd build
  - cmake -G "%generator%" -DCMAKE_INSTALL_PREFIX=../../../libs/quazip -DZLIB_INCLUDE_DIR="%APPVEYOR_BUILD_FOLDER%\libs\zlib\include;%APPVEYOR_BUILD_FOLDER%\third-party\zlib" -DZLIB_LIBRARY="%APPVEYOR_BUILD_FOLDER%\libs\zlib\lib\zlib.lib" ../
  - call msbuild %MSBUILD_FLAGS% /t:Build /p:Configuration=%CONFIGURATION% /p:Platform="%bitsize%" quazip.sln
  - msbuild %MSBUILD_FLAGS% INSTALL.vcxproj
  # yaml-cpp
  - cd %APPVEYOR_BUILD_FOLDER%\third-party\yaml-cpp
  - mkdir build
  - cd build
  - cmake -G "%generator%" -DCMAKE_INSTALL_PREFIX=../../../libs/yaml-cpp ../ -DBUILD_SHARED_LIBS=OFF -DYAML_CPP_BUILD_TESTS=OFF -DYAML_CPP_BUILD_TOOLS=OFF
  - dir
  - call msbuild %MSBUILD_FLAGS% /t:Build /p:Configuration=%CONFIGURATION% /p:Platform="%bitsize%" %APPVEYOR_BUILD_FOLDER%\third-party\yaml-cpp\build\yaml-cpp.sln
  - msbuild %MSBUILD_FLAGS% INSTALL.vcxproj

build_script:
  #- if "%APPVEYOR_REPO_TAG%"=="true" (set CONFIGURATION=Release) else (set CONFIGURATION=Debug)
  - cd %APPVEYOR_BUILD_FOLDER%
  # build dependencies, see before_build section 
  # ...
  # versionize 
  - call bin\phing\phing.bat -f build.appveyor.xml
  # run qmake  
  - qmake wpnxm-servercontrolpanel.pro -r -spec %SPEC% -config %CONFIGURATION% 
  # run make
  - nmake BUILD=%CONFIGURATION%

after_build:
  - echo %cd%
  - dir %APPVEYOR_BUILD_FOLDER% /s
  - cd %APPVEYOR_BUILD_FOLDER%\%CONFIGURATION%
  - dir
  # identify and copy dependencies
  - windeployqt.exe --no-system-d3d-compiler --no-angle --no-opengl --no-opengl-sw --no-translations --release wpn-xm.exe
  # copy dependencies 
  # 1) zlib 
  - copy %APPVEYOR_BUILD_FOLDER%\libs\zlib\bin\zlib.dll %APPVEYOR_BUILD_FOLDER%\%CONFIGURATION%\zlib.dll
  - copy %APPVEYOR_BUILD_FOLDER%\third-party\zlib\build\%CONFIGURATION%\zlib.exp %APPVEYOR_BUILD_FOLDER%\libs\quazip\lib\zlib.exp
  # 2) quazip
  - mkdir %APPVEYOR_BUILD_FOLDER%\libs\quazip\bin
  - copy %APPVEYOR_BUILD_FOLDER%\libs\quazip\lib\quazip.dll %APPVEYOR_BUILD_FOLDER%\libs\quazip\bin\quazip.dll
  - copy %APPVEYOR_BUILD_FOLDER%\libs\quazip\lib\quazip.dll %APPVEYOR_BUILD_FOLDER%\%CONFIGURATION%\quazip.dll
  - copy %APPVEYOR_BUILD_FOLDER%\third-party\quazip\build\%CONFIGURATION%\quazip.exp %APPVEYOR_BUILD_FOLDER%\libs\quazip\lib\quazip.exp
  # 3) yaml-cpp
  #- copy %APPVEYOR_BUILD_FOLDER%\libs\yaml-cpp\bin\yaml-cpp.dll %APPVEYOR_BUILD_FOLDER%\%CONFIGURATION%\yaml-cpp.dll
  # - no exports for yaml-cpp?
  # 4) openssl
  - mkdir %APPVEYOR_BUILD_FOLDER%\libs\openssl\bin
  # - C:\OpenSSL-Win32\bin
  - if %platform%==amd64_x86 copy C:\OpenSSL-Win32\bin\libeay32.dll %APPVEYOR_BUILD_FOLDER%\libs\openssl\bin\libeay32.dll
  - if %platform%==amd64_x86 copy C:\OpenSSL-Win32\bin\ssleay32.dll %APPVEYOR_BUILD_FOLDER%\libs\openssl\bin\ssleay32.dll
  - if %platform%==amd64_x86 copy C:\OpenSSL-Win32\bin\libeay32.dll %APPVEYOR_BUILD_FOLDER%\%CONFIGURATION%\libeay32.dll
  - if %platform%==amd64_x86 copy C:\OpenSSL-Win32\bin\ssleay32.dll %APPVEYOR_BUILD_FOLDER%\%CONFIGURATION%\ssleay32.dll
  # - C:\OpenSSL-Win64\bin
  - if %platform%==amd64 copy C:\OpenSSL-Win64\bin\libeay32.dll %APPVEYOR_BUILD_FOLDER%\libs\openssl\bin\libeay32.dll
  - if %platform%==amd64 copy C:\OpenSSL-Win64\bin\ssleay32.dll %APPVEYOR_BUILD_FOLDER%\libs\openssl\bin\ssleay32.dll
  - if %platform%==amd64 copy C:\OpenSSL-Win64\bin\libeay32.dll %APPVEYOR_BUILD_FOLDER%\%CONFIGURATION%\libeay32.dll
  - if %platform%==amd64 copy C:\OpenSSL-Win64\bin\ssleay32.dll %APPVEYOR_BUILD_FOLDER%\%CONFIGURATION%\ssleay32.dll
  # cleanups
  - del *.obj
  - del *.o
  - del *.cpp
  - del *.a
  - del vcredist*.exe
  # - remove opengl rendering stuff 
  - del opengl32sw.dll
  - del D3Dcompiler*.dll
  - del libGLES*.dll
  - del libEGL.dll
  # - remove SVG stuff
  - del Qt5SVG.dll
  - rd /s /q %APPVEYOR_BUILD_FOLDER%\%CONFIGURATION%\iconengines
  # - remove imagehandlers
  - del %APPVEYOR_BUILD_FOLDER%\%CONFIGURATION%\imageformats\qwebp.dll
  - del %APPVEYOR_BUILD_FOLDER%\%CONFIGURATION%\imageformats\qtiff.dll
  - del %APPVEYOR_BUILD_FOLDER%\%CONFIGURATION%\imageformats\qdds.dll
  - del %APPVEYOR_BUILD_FOLDER%\%CONFIGURATION%\imageformats\qtga.dll
  - del %APPVEYOR_BUILD_FOLDER%\%CONFIGURATION%\imageformats\qgif.dll
  - del %APPVEYOR_BUILD_FOLDER%\%CONFIGURATION%\imageformats\qicns.dll
  # package server control panel
  - 7z a -tzip wpnxm-scp-%APPVEYOR_BUILD_VERSION%-%bitsize%-%suffix%.zip . -mx9 -mmt
  - appveyor PushArtifact wpnxm-scp-%APPVEYOR_BUILD_VERSION%-%bitsize%-%suffix%.zip
  - del wpnxm-scp-%APPVEYOR_BUILD_VERSION%-%bitsize%-%suffix%.zip
  # package dependencies 
  - cd %APPVEYOR_BUILD_FOLDER%
  - 7z a -tzip wpnxm-dependencies-%APPVEYOR_BUILD_VERSION%-%bitsize%-%suffix%.zip libs -mx9 -mmt
  - appveyor PushArtifact wpnxm-dependencies-%APPVEYOR_BUILD_VERSION%-%bitsize%-%suffix%.zip
  # build enigma package
  - cd %APPVEYOR_BUILD_FOLDER%\bin
  - php\php -v
  - php\php EnigmaVirtualBox.php ..\release wpn-xm.exe wpn-xm_boxed.exe
  - ren wpn-xm_boxed.exe wpn-xm.exe
  - 7z a -tzip wpnxm-scp-%APPVEYOR_BUILD_VERSION%-%bitsize%-%suffix%-boxed.zip wpn-xm.exe -mx9 -mmt
  - appveyor PushArtifact wpnxm-scp-%APPVEYOR_BUILD_VERSION%-%bitsize%-%suffix%-boxed.zip
  
test_script:
  # test normal executable
  - cd %APPVEYOR_BUILD_FOLDER%\%CONFIGURATION%
  - wpn-xm.exe -v
  - wpn-xm.exe --help
  # test boxed executable
  - cd %APPVEYOR_BUILD_FOLDER%\bin
  - wpn-xm.exe -v
  - wpn-xm.exe --help

#artifacts:
#- path: build/scp-*.7z

#deploy:
#  provider: GitHub
#  auth_token:
#    secure: ---------------------
#  artifact: /.*\.7z/
#  on:
#    appveyor_repo_tag: true
